/**
 * POS API Documentation
 *
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AccountDTO } from '../model/models';
import { PagingResultAccountDTO } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface AccountManagementServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Get all accounts
     * Retrieves a list of all accounts in the system
     */
    getAllAccounts(extraHttpRequestParams?: any): Observable<Array<AccountDTO>>;

    /**
     * Search accounts
     * Search accounts with pagination and sorting
     * @param filter Search filter text
     * @param page Page number (1-based)
     * @param pageSize Number of items per page
     * @param sortCol Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
     * @param sortDir Sort direction (asc or desc)
     */
    searchAccounts(filter?: string, page?: number, pageSize?: number, sortCol?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PagingResultAccountDTO>;

    /**
     * 
     * 
     * @param filter Search filter text
     * @param page Page number (1-based)
     * @param pageSize Number of items per page
     * @param sortCol Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
     * @param sortDir Sort direction (asc or desc)
     */
    searchCashAccounts(filter?: string, page?: number, pageSize?: number, sortCol?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PagingResultAccountDTO>;

    /**
     * 
     * 
     * @param filter Search filter text
     * @param page Page number (1-based)
     * @param pageSize Number of items per page
     * @param sortCol Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
     * @param sortDir Sort direction (asc or desc)
     */
    searchExpenseAccounts(filter?: string, page?: number, pageSize?: number, sortCol?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PagingResultAccountDTO>;

    /**
     * 
     * 
     * @param filter Search filter text
     * @param page Page number (1-based)
     * @param pageSize Number of items per page
     * @param sortCol Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
     * @param sortDir Sort direction (asc or desc)
     */
    searchIncomeAccounts(filter?: string, page?: number, pageSize?: number, sortCol?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PagingResultAccountDTO>;

    /**
     * 
     * 
     * @param filter Search filter text
     * @param page Page number (1-based)
     * @param pageSize Number of items per page
     * @param sortCol Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
     * @param sortDir Sort direction (asc or desc)
     */
    searchInventoryAccounts(filter?: string, page?: number, pageSize?: number, sortCol?: string, sortDir?: string, extraHttpRequestParams?: any): Observable<PagingResultAccountDTO>;

}
