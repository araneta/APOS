/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getConfig } from '../fn/office-config-controller/get-config';
import { GetConfig$Params } from '../fn/office-config-controller/get-config';
import { OfficeConfig } from '../models/office-config';
import { saveConfig } from '../fn/office-config-controller/save-config';
import { SaveConfig$Params } from '../fn/office-config-controller/save-config';

@Injectable({ providedIn: 'root' })
export class OfficeConfigControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getConfig()` */
  static readonly GetConfigPath = '/api/config';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getConfig()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConfig$Response(params?: GetConfig$Params, context?: HttpContext): Observable<StrictHttpResponse<OfficeConfig>> {
    return getConfig(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getConfig$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getConfig(params?: GetConfig$Params, context?: HttpContext): Observable<OfficeConfig> {
    return this.getConfig$Response(params, context).pipe(
      map((r: StrictHttpResponse<OfficeConfig>): OfficeConfig => r.body)
    );
  }

  /** Path part for operation `saveConfig()` */
  static readonly SaveConfigPath = '/api/config';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveConfig()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveConfig$Response(params: SaveConfig$Params, context?: HttpContext): Observable<StrictHttpResponse<OfficeConfig>> {
    return saveConfig(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveConfig$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveConfig(params: SaveConfig$Params, context?: HttpContext): Observable<OfficeConfig> {
    return this.saveConfig$Response(params, context).pipe(
      map((r: StrictHttpResponse<OfficeConfig>): OfficeConfig => r.body)
    );
  }

}
