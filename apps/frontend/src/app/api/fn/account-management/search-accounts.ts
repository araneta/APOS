/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { PagingResultAccountDto } from '../../models/paging-result-account-dto';

export interface SearchAccounts$Params {

/**
 * Search filter text
 */
  filter?: string;

/**
 * Page number (1-based)
 */
  page?: number;

/**
 * Number of items per page
 */
  pageSize?: number;

/**
 * Sort column (id, code, name, level, type, category, currency, createdAt, updatedAt)
 */
  sortCol?: string;

/**
 * Sort direction (asc or desc)
 */
  sortDir?: string;
}

export function searchAccounts(http: HttpClient, rootUrl: string, params?: SearchAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<PagingResultAccountDto>> {
  const rb = new RequestBuilder(rootUrl, searchAccounts.PATH, 'get');
  if (params) {
    rb.query('filter', params.filter, {});
    rb.query('page', params.page, {});
    rb.query('pageSize', params.pageSize, {});
    rb.query('sortCol', params.sortCol, {});
    rb.query('sortDir', params.sortDir, {});
  }

  return http.request(
    rb.build({ responseType: 'blob', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<PagingResultAccountDto>;
    })
  );
}

searchAccounts.PATH = '/api/accounts/search';
